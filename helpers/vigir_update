#!/bin/bash
#/*********************************************************************
# * Software License Agreement (BSD License)
# *
# *  Copyright (c) 2013-2015, TORC Robotics, LLC ( Team ViGIR )
# *  All rights reserved.
# *
# *  Redistribution and use in source and binary forms, with or without
# *  modification, are permitted provided that the following conditions
# *  are met:
# *
# *   * Redistributions of source code must retain the above copyright
# *     notice, this list of conditions and the following disclaimer.
# *   * Redistributions in binary form must reproduce the above
# *     copyright notice, this list of conditions and the following
# *     disclaimer in the documentation and/or other materials provided
# *     with the distribution.
# *   * Neither the name of Team ViGIR, TORC Robotics, nor the names of its
# *     contributors may be used to endorse or promote products derived
# *     from this software without specific prior written permission.
# *
# *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# *  POSSIBILITY OF SUCH DAMAGE.
# *********************************************************************/
# @TODO_ADD_AUTHOR_INFO
echo "Update for the common ViGIR software ..."

# Make sure we are back to the correct setup (This doesn't seem to work when invoked from flor_update, so fix there first)
if [ -f ~/.bashrc ]; then
    echo "Source the .bashrc ..."
    source ~/.bashrc
fi

if [ -z "$VIGIR_ROOT_DIR" ]; then
   if [ -z "$ROS_WORKSPACE" ]; then
        echo
        echo "-------------------------------------------------------------------------"
        echo "-------------------------------------------------------------------------"
        echo
        echo " The VIGIR_ROOT_DIR (e.g. ~/vigir_repo ) is not set.  "
        echo " This must be set for the scripts and build system to work correctly!"
        echo
        echo " Please correct in the .bashrc and re-start shell!"
        echo
        echo "-------------------------------------------------------------------------"
        echo "-------------------------------------------------------------------------"
        echo

        exit 1
   else

        echo "Using the ROS_WORKSPACE variable to set the VIGIR_ROOT_DIR ... should confirm this!"
        cd ${ROS_WORKSPACE}/..
        export VIGIR_ROOT_DIR=${PWD}
        if [ -d "$VIGIR_ROOT_DIR/catkin_ws" ]; then
                echo "VIGIR_ROOT_DIR=${VIGIR_ROOT_DIR}"
        else
                cd .. # Maybe we had catkin_ws/devel instead
                export VIGIR_ROOT_DIR=${PWD}
                if [ -d "$VIGIR_ROOT_DIR/catkin_ws" ]; then
                    echo "VIGIR_ROOT_DIR=${VIGIR_ROOT_DIR}"
                else
                    echo "Cannot find the proper root directory!"
                    exit 1
                fi
        fi  
            
        if [ -f ~/.bashrc ]; then
            echo "Adding VIGIR_ROOT_DIR and new catkin setup to .bashrc for future use!"
            VIGIR_ROOT_LINE="export VIGIR_ROOT_DIR=${VIGIR_ROOT_DIR}"
            WS_SETUP_LINE=". \"${VIGIR_ROOT_DIR}/catkin_ws/setup.bash\""
            DEVEL_SETUP_LINE=". \"${VIGIR_ROOT_DIR}/catkin_ws/devel/setup.bash\""
            VIGIR_SETUP_LINE=". \"${VIGIR_ROOT_DIR}/scripts/setup/setup.bash\""
                
            echo "$VIGIR_ROOT_LINE"
            echo "$WS_SETUP_LINE"
            echo "$DEVEL_SETUP_LINE"
            echo "$VIGIR_SETUP_LINE"
            echo "$VIGIR_ROOT_LINE"  >> ~/.bashrc
            echo "$WS_SETUP_LINE"    >> ~/.bashrc
            echo "$DEVEL_SETUP_LINE" >> ~/.bashrc
            echo "$VIGIR_SETUP_LINE" >> ~/.bashrc
        else
            echo "Not adding environment setup to your ~/.bashrc, since it already contains lines that look like ros setup calls:"
            echo $BASHRC_ROS_SETUP_LINES
            echo "The correct lines would be:"
            echo "$VIGIR_ROOT_LINE"
            echo "$WS_SETUP_LINE"
            echo "$DEVEL_SETUP_LINE"
            echo "$VIGIR_SETUP_LINE"
        fi
   fi
fi


#This could be extended to automatically create the standard directories if they are not yet existing

# Work around issue with rosws hanging on asking for user credentials
cd ${VIGIR_ROOT_DIR}/rosinstall
echo "Update the latest rosinstall files in "$PWD" ..."

git pull

# Install package dependencies
echo "-------------------------------"
echo "     Update the package dependencies ..."
./install_scripts/install_vigir_package_dependencies.sh

echo "-------------------------------"
cd ${VIGIR_ROOT_DIR}

OLD_ROSBUILD_WS_REMOVED=false
if [ -d rosbuild_ws ]; then

        echo
        echo "-------------------------------"
        echo
        echo "The old rosbuild workspace in "$PWD" still exists ..."
        echo "This script can delete the directory and update the setup in the bashrc."
        echo "   Do you want to proceed with rosbuild_ws removal? (y)es or (n)o"
        read -p " " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            # do dangerous stuff
                OLD_ROSBUILD_WS_REMOVED=true
                echo "   - removing and modifying the bashrc setup ..."
                echo ${PWD}
                rm -rf rosbuild_ws
                echo
                #==============================================================================================
                # Handling this above now
                #echo "Make sure the setup scripts are updated in bashrc - should clean up the old ones!"
                #VIGIR_ROOT_LINE="export VIGIR_ROOT_DIR=${VIGIR_ROOT_DIR}"
                #WS_SETUP_LINE=". \"${VIGIR_ROOT_DIR}/catkin_ws/setup.bash\""
                #DEVEL_SETUP_LINE=". \"${VIGIR_ROOT_DIR}/catkin_ws/devel/setup.bash\""
                #VIGIR_SETUP_LINE=". \"${VIGIR_ROOT_DIR}/scripts/setup/setup.bash\""
                #if [ -f ~/.bashrc ]; then
                #    echo "Adding environment setup to ~/.bashrc:"
                #    echo "$VIGIR_ROOT_LINE"
                #    echo "$WS_SETUP_LINE"
                #    echo "$DEVEL_SETUP_LINE"
                #    echo "$VIGIR_SETUP_LINE"
                #    echo "$VIGIR_ROOT_LINE"  >> ~/.bashrc
                #    echo "$WS_SETUP_LINE" >> ~/.bashrc
                #    echo "$DEVEL_SETUP_LINE" >> ~/.bashrc
                #    echo "$VIGIR_SETUP_LINE" >> ~/.bashrc
                #else
                #    echo
                #    echo "Could not find your ~/.bashrc, please manually execute the following lines to setup your environment:"
                #    echo "$VIGIR_ROOT_LINE"
                #    echo "$WS_SETUP_LINE"
                #    echo "$DEVEL_SETUP_LINE"
                #    echo "$VIGIR_SETUP_LINE"
                #fi
                #=============================================================================================================
                echo
                cd catkin_ws
                echo

                # Update the ROS_WORKSPACE and path
                source setup.bash
                source
                export PATH=$VIGIR_ROOT_DIR/scripts/helper:$PATH

        else
                echo
                echo "Ignoring the rosbuild_ws setup for now - setup the catkin workspace ..."
                cd catkin_ws
                source setup.bash
        fi
        echo "-------------------------------"
else
        # Change to catkin ws for update
        cd catkin_ws
fi

echo
echo "Update the catkin workspace in "$PWD" ..."
echo 
echo "-------------------------------"

# Because it is very difficult to remove packages that have been added to a workspace,
# we use this script to check for obsolete package locations and remove them if they
# were indeed detected.
rm_unused_catkin_packages

# Required for MoveIt! stuff
rosdep update
rosdep install --from-paths src --ignore-src --rosdistro hydro -y

rosws merge ../rosinstall/vigir_rosinstall.rosinstall
rosws update
rosws regenerate
echo "-------------------------------"
if [ "$OLD_ROSBUILD_WS_REMOVED" == true ]; then
        echo
        echo "This script removed the old rosbuild_ws code!"
        echo "  Please edit your .bashrc file to remove obsolete setup from rosbuild_ws and replace with the catkin_ws setup."
        echo
        echo "  You must close and reopen the terminal to properly set up"
        echo
        echo "-------------------------------"
fi

